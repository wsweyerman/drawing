package org.sam.christmasdrawing.main;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.sam.christmasdrawing.util.Person;
import org.sam.christmasdrawing.util.RandomPerm;

/**
 * Reads a list of people in from a flat file including those that they are not allowed to give a gift to.
 * Then a random drawing is generated to denote who is giving gifts to whom. This drawing 
 * satisfies three rules: a person cannot draw themself, two people cannot draw each other, and
 * a person cannot draw a person on their disallowed list.
 * 
 * The format of the input file is:
 * 
 * person name
 * disallowed 1
 * disallowed 2
 * ...
 * disallowed n
 * 
 * person name
 * disallowed 1
 * ...
 * 
 * The format of the output file is:
 * 
 * giver 1 -> receiver 1
 * giver 2 -> receiver 2
 * ...
 * 
 * 
 * 
 * @author smakked
 *
 */

public class Main {

	public static void setFamily(List<Person> family, BufferedReader inFile) throws IOException {
		
		while(inFile.ready()) {
			String familyName = inFile.readLine();
			if(familyName.length() > 0) {
				Person person = new Person(familyName);
				while(inFile.ready()) {
					String notAllowed = inFile.readLine();
					if(notAllowed.length() == 0)
						break;
					person.addNotAllowed(notAllowed);
				}
				family.add(person);
			}
		}
		
	}
	
	public static boolean permutationAllowed(List<Person> family, int[] perm) {
		int n = family.size();
		if(n != perm.length)
			throw new IllegalArgumentException("Family set is size " + n + ", but permutation is size " + perm.length);
		
		for(int i = 0; i < n; i++) {
			// don't allow someone to draw their own name, the name of someone who is disallowed or have a cycle of length two
			if(i == perm[perm[i]] || !family.get(i).isAllowed(family.get(perm[i]).getName())) {
				System.out.println("Not allowing (" + i + "," + perm[i] + "): " + family.get(i).getName() + " -> " + family.get(perm[i]).getName());
				return false;
			}
		}
		return true;
	}
	
	public static void writeDrawing(FileWriter outFile, List<Person> family, int[] perm) throws IOException {
		int n = family.size();
		if(n != perm.length)
			throw new IllegalArgumentException("Family set is size " + n + ", but permutation is size " + perm.length);
		
		for(int i = 0; i < n; i++) {
			String from = family.get(i).getName();
			String to = family.get(perm[i]).getName();
			System.out.println(from + " -> " + to);
			outFile.write(from + " -> " + to + "\n");
		}
	}
	
	public static void main(String[] args) throws IOException {
		String outFileName = args[0];
		String inFileName = args[1];
		FileWriter outFile = new FileWriter(outFileName);
		BufferedReader inFile = new BufferedReader(new FileReader(inFileName));
		List<Person> family = new ArrayList<Person>();
		
		setFamily(family, inFile);
		int[] perm = RandomPerm.getRandomPerm(family.size());
		while(!permutationAllowed(family, perm)) {
			for(int i = 0; i < family.size(); i++) {
				System.out.print(perm[i] + ",");
			}
			System.out.println("Trying another permutation....");
			perm = RandomPerm.getRandomPerm(family.size());
		}
		
		writeDrawing(outFile, family, perm);
		outFile.close();
		inFile.close();
	}
}
